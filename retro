#!/bin/bash

# Code198x Retro Development CLI
# A friendly wrapper for Docker-based retro development

set -e

DOCKER_ORG="ghcr.io/code198x"
VERSION="1.0.0"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show banner
show_banner() {
    echo -e "${BLUE}"
    echo "╔════════════════════════════════════════╗"
    echo "║     Code198x Retro Development        ║"
    echo "║         Assembly Made Easy            ║"
    echo "╚════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Show help
show_help() {
    show_banner
    echo "Usage: retro [command] [options]"
    echo ""
    echo "Commands:"
    echo "  shell <system>    Start development shell"
    echo "  build <file>      Assemble source file"
    echo "  new <name>        Create new project"
    echo "  list              List available systems"
    echo "  update            Update all images"
    echo "  help              Show this help"
    echo ""
    echo "Systems:"
    echo "  c64, commodore-64           Commodore 64"
    echo "  nes, nintendo               Nintendo Entertainment System"
    echo "  spectrum, zx-spectrum       ZX Spectrum"
    echo "  genesis, sega-genesis       Sega Genesis"
    echo "  amiga, commodore-amiga      Commodore Amiga"
    echo ""
    echo "Examples:"
    echo "  retro shell c64            # Start C64 development"
    echo "  retro build main.asm       # Assemble current file"
    echo "  retro new space-game       # Create new project"
}

# Map short names to full system names
map_system() {
    case "$1" in
        c64) echo "commodore-64" ;;
        nes|nintendo) echo "nintendo-entertainment-system" ;;
        spectrum|zx|zx-spectrum) echo "sinclair-zx-spectrum" ;;
        genesis|sega) echo "sega-genesis" ;;
        amiga) echo "commodore-amiga" ;;
        *) echo "$1" ;;
    esac
}

# Start development shell
start_shell() {
    local system=$(map_system "$1")
    echo -e "${GREEN}Starting $system development environment...${NC}"

    docker run -it --rm \
        -v "$(pwd)":/workspace \
        -w /workspace \
        "${DOCKER_ORG}/${system}:latest" \
        /bin/bash
}

# Build/assemble file
build_file() {
    local file="$1"
    local system="${2:-auto}"

    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File '$file' not found${NC}"
        exit 1
    fi

    # Auto-detect system from current directory or file extension
    if [ "$system" = "auto" ]; then
        if [[ "$PWD" == *"c64"* ]] || [[ "$PWD" == *"commodore-64"* ]]; then
            system="commodore-64"
        elif [[ "$PWD" == *"nes"* ]] || [[ "$PWD" == *"nintendo"* ]]; then
            system="nintendo-entertainment-system"
        elif [[ "$PWD" == *"spectrum"* ]]; then
            system="sinclair-zx-spectrum"
        else
            echo -e "${YELLOW}Could not auto-detect system. Please specify:${NC}"
            echo "  retro build $file <system>"
            exit 1
        fi
    else
        system=$(map_system "$system")
    fi

    echo -e "${GREEN}Building $file for $system...${NC}"

    docker run --rm \
        -v "$(pwd)":/workspace \
        -w /workspace \
        "${DOCKER_ORG}/${system}:latest" \
        "$file"
}

# Create new project
new_project() {
    local name="$1"
    local system="${2:-c64}"

    system=$(map_system "$system")

    echo -e "${GREEN}Creating new $system project: $name${NC}"

    mkdir -p "$name"
    cd "$name"

    cat > main.asm << EOF
; $name
; $system Assembly Project
; Created: $(date)

        ; Your code here

EOF

    echo -e "${GREEN}Project created in $name/${NC}"
    echo "To start developing:"
    echo "  cd $name"
    echo "  retro shell $system"
}

# List available systems
list_systems() {
    show_banner
    echo "Available systems:"
    echo ""
    echo -e "${BLUE}6502 Systems:${NC}"
    echo "  • commodore-64 (c64)"
    echo "  • nintendo-entertainment-system (nes)"
    echo "  • apple-ii"
    echo "  • atari-2600"
    echo ""
    echo -e "${BLUE}Z80 Systems:${NC}"
    echo "  • sinclair-zx-spectrum (spectrum)"
    echo "  • sega-master-system"
    echo "  • msx"
    echo "  • amstrad-cpc"
    echo ""
    echo -e "${BLUE}68000 Systems:${NC}"
    echo "  • commodore-amiga (amiga)"
    echo "  • sega-genesis (genesis)"
    echo "  • atari-st"
    echo "  • neo-geo"
}

# Update all images
update_images() {
    echo -e "${GREEN}Updating all Docker images...${NC}"

    for system in commodore-64 nintendo-entertainment-system sinclair-zx-spectrum sega-genesis commodore-amiga; do
        echo -e "${YELLOW}Pulling $system...${NC}"
        docker pull "${DOCKER_ORG}/${system}:latest"
    done

    echo -e "${GREEN}All images updated!${NC}"
}

# Main script logic
case "${1:-help}" in
    shell|sh)
        start_shell "${2:-c64}"
        ;;
    build|asm|assemble)
        build_file "$2" "${3:-auto}"
        ;;
    new|create)
        new_project "$2" "${3:-c64}"
        ;;
    list|ls|systems)
        list_systems
        ;;
    update|pull)
        update_images
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac