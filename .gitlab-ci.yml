# GitLab CI/CD Configuration for Code198x Development Environment
# Mirrors GitHub Actions functionality for redundancy

variables:
  DOCKER_BUILDKIT: "1"
  BUILDX_NO_DEFAULT_ATTESTATIONS: "1"
  GITLAB_REGISTRY: $CI_REGISTRY
  DOCKER_HUB_ORG: code198x

stages:
  - build-base
  - build-systems
  - release

# Base image builds (triggered by changes or manual)
.base_build_template: &base_build
  stage: build-base
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - if [ -n "$DOCKER_HUB_USERNAME" ] && [ -n "$DOCKER_HUB_TOKEN" ]; then
        docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN;
      fi
  script:
    - |
      # Determine image tags
      if [ "$CI_COMMIT_TAG" ]; then
        TAGS="$CI_COMMIT_TAG latest"
      else
        TAGS="$CI_COMMIT_REF_SLUG"
      fi

      # Build and push to GitLab registry
      for TAG in $TAGS; do
        docker build -t $GITLAB_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$TAG $BUILD_CONTEXT
        docker push $GITLAB_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$TAG

        # Also push to Docker Hub if credentials available
        if [ -n "$DOCKER_HUB_USERNAME" ]; then
          docker tag $GITLAB_REGISTRY/$CI_PROJECT_PATH/$IMAGE_NAME:$TAG $DOCKER_HUB_ORG/$IMAGE_NAME:$TAG
          docker push $DOCKER_HUB_ORG/$IMAGE_NAME:$TAG
        fi
      done
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
    - when: manual

# Base images
code198x-base:
  <<: *base_build
  variables:
    IMAGE_NAME: code198x-base
    BUILD_CONTEXT: ./base-images/code198x-base

6502-base:
  <<: *base_build
  variables:
    IMAGE_NAME: 6502-base
    BUILD_CONTEXT: ./base-images/6502-base
  needs: ["code198x-base"]

z80-base:
  <<: *base_build
  variables:
    IMAGE_NAME: z80-base
    BUILD_CONTEXT: ./base-images/z80-base
  needs: ["code198x-base"]

68000-base:
  <<: *base_build
  variables:
    IMAGE_NAME: 68000-base
    BUILD_CONTEXT: ./base-images/68000-base
  needs: ["code198x-base"]

8080-base:
  <<: *base_build
  variables:
    IMAGE_NAME: 8080-base
    BUILD_CONTEXT: ./base-images/8080-base
  needs: ["code198x-base"]

6809-base:
  <<: *base_build
  variables:
    IMAGE_NAME: 6809-base
    BUILD_CONTEXT: ./base-images/6809-base
  needs: ["code198x-base"]

mips-base:
  <<: *base_build
  variables:
    IMAGE_NAME: mips-base
    BUILD_CONTEXT: ./base-images/mips-base
  needs: ["code198x-base"]

arm-base:
  <<: *base_build
  variables:
    IMAGE_NAME: arm-base
    BUILD_CONTEXT: ./base-images/arm-base
  needs: ["code198x-base"]

sh-base:
  <<: *base_build
  variables:
    IMAGE_NAME: sh-base
    BUILD_CONTEXT: ./base-images/sh-base
  needs: ["code198x-base"]

x86-base:
  <<: *base_build
  variables:
    IMAGE_NAME: x86-base
    BUILD_CONTEXT: ./base-images/x86-base
  needs: ["code198x-base"]

v30-base:
  <<: *base_build
  variables:
    IMAGE_NAME: v30-base
    BUILD_CONTEXT: ./base-images/v30-base
  needs: ["code198x-base"]

tlcs-base:
  <<: *base_build
  variables:
    IMAGE_NAME: tlcs-base
    BUILD_CONTEXT: ./base-images/tlcs-base
  needs: ["code198x-base"]

# System builds (sample - full list would be all 64 systems)
.system_build_template: &system_build
  stage: build-systems
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - if [ -n "$DOCKER_HUB_USERNAME" ] && [ -n "$DOCKER_HUB_TOKEN" ]; then
        docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN;
      fi
  script:
    - |
      # Determine image tags
      if [ "$CI_COMMIT_TAG" ]; then
        TAGS="$CI_COMMIT_TAG latest"
      else
        TAGS="$CI_COMMIT_REF_SLUG"
      fi

      # Build and push system container
      for TAG in $TAGS; do
        docker build -t $GITLAB_REGISTRY/$CI_PROJECT_PATH/$SYSTEM_NAME:$TAG ./systems/$SYSTEM_NAME
        docker push $GITLAB_REGISTRY/$CI_PROJECT_PATH/$SYSTEM_NAME:$TAG

        # Also push to Docker Hub if credentials available
        if [ -n "$DOCKER_HUB_USERNAME" ]; then
          docker tag $GITLAB_REGISTRY/$CI_PROJECT_PATH/$SYSTEM_NAME:$TAG $DOCKER_HUB_ORG/$SYSTEM_NAME:$TAG
          docker push $DOCKER_HUB_ORG/$SYSTEM_NAME:$TAG
        fi
      done
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"
    - when: manual

# Key gaming systems (add all 64 systems following this pattern)
commodore-64:
  <<: *system_build
  variables:
    SYSTEM_NAME: commodore-64
  needs: ["6502-base"]

nintendo-nes:
  <<: *system_build
  variables:
    SYSTEM_NAME: nintendo-nes
  needs: ["6502-base"]

sega-genesis:
  <<: *system_build
  variables:
    SYSTEM_NAME: sega-genesis
  needs: ["68000-base"]

sony-playstation:
  <<: *system_build
  variables:
    SYSTEM_NAME: sony-playstation
  needs: ["mips-base"]

nintendo-gba:
  <<: *system_build
  variables:
    SYSTEM_NAME: nintendo-gba
  needs: ["arm-base"]

# Release job (creates GitLab release)
create-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Creating GitLab release for $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    description: |
      # Code198x Development Environment $CI_COMMIT_TAG

      A comprehensive retro gaming development platform with 64 gaming systems across 12 processor families.

      ## Container Registries

      - **GitLab**: `registry.gitlab.com/code198x/development-environment/[system-name]:$CI_COMMIT_TAG`
      - **Docker Hub**: `code198x/[system-name]:$CI_COMMIT_TAG` (if available)

      ## Quick Start

      ```bash
      # Pull from GitLab Container Registry
      docker pull registry.gitlab.com/code198x/development-environment/commodore-64:$CI_COMMIT_TAG
      docker pull registry.gitlab.com/code198x/development-environment/nintendo-nes:$CI_COMMIT_TAG
      docker pull registry.gitlab.com/code198x/development-environment/sega-genesis:$CI_COMMIT_TAG
      ```

      For complete documentation, see the [GitHub repository](https://github.com/code198x/development-environment).

# Manual jobs for testing specific systems
.manual_system_test: &manual_test
  stage: build-systems
  image: docker:24-dind
  services:
    - docker:24-dind
  script:
    - docker build ./systems/$SYSTEM_NAME
    - echo "âœ… $SYSTEM_NAME builds successfully"
  rules:
    - when: manual
  allow_failure: true

test-commodore-64:
  <<: *manual_test
  variables:
    SYSTEM_NAME: commodore-64

test-nintendo-nes:
  <<: *manual_test
  variables:
    SYSTEM_NAME: nintendo-nes