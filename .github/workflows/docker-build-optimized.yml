name: Build and Push Docker Images (Optimized)

on:
  push:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - '.github/workflows/docker-build-optimized.yml'
      - 'base-images/*/Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - 'base-images/*/Dockerfile'
  workflow_dispatch:
  schedule:
    # Weekly builds to keep images fresh
    - cron: '0 2 * * 1'

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_ORG: code198x
  GHCR_ORG: ghcr.io/code198x

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

jobs:
  # ============================================
  # STAGE 1: Build the root base image
  # ============================================
  build-root-base:
    name: Build code198x-base
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_ORG }}/code198x-base
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/code198x-base', env.DOCKER_ORG) || '' }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/code198x-base
          file: ./base-images/code198x-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # STAGE 2: Build processor-specific base images in parallel
  # Then immediately build their dependent system images
  # ============================================

  # 6502 Family Chain
  build-6502-family:
    name: Build 6502 family
    runs-on: ubuntu-latest
    needs: build-root-base

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build 6502-base
      - name: Build 6502-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/6502-base
          file: ./base-images/6502-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/6502-base:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/6502-base:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Commodore 64
      - name: Build Commodore 64
        uses: docker/build-push-action@v5
        with:
          context: ./systems/commodore-64
          file: ./systems/commodore-64/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/commodore-64:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/commodore-64:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Nintendo Entertainment System
      - name: Build Nintendo Entertainment System
        uses: docker/build-push-action@v5
        with:
          context: ./systems/nintendo-entertainment-system
          file: ./systems/nintendo-entertainment-system/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/nintendo-entertainment-system:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/nintendo-entertainment-system:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Z80 Family Chain
  build-z80-family:
    name: Build Z80 family
    runs-on: ubuntu-latest
    needs: build-root-base

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build z80-base
      - name: Build z80-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/z80-base
          file: ./base-images/z80-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/z80-base:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/z80-base:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build ZX Spectrum
      - name: Build Sinclair ZX Spectrum
        uses: docker/build-push-action@v5
        with:
          context: ./systems/sinclair-zx-spectrum
          file: ./systems/sinclair-zx-spectrum/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/sinclair-zx-spectrum:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/sinclair-zx-spectrum:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 68000 Family Chain
  build-68000-family:
    name: Build 68000 family
    runs-on: ubuntu-latest
    needs: build-root-base

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build 68000-base
      - name: Build 68000-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/68000-base
          file: ./base-images/68000-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/68000-base:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/68000-base:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build Commodore Amiga
      - name: Build Commodore Amiga
        uses: docker/build-push-action@v5
        with:
          context: ./systems/commodore-amiga
          file: ./systems/commodore-amiga/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_ORG }}/commodore-amiga:latest
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/commodore-amiga:latest', env.DOCKER_ORG) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # STAGE 3: Summary and release
  # ============================================
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build-6502-family, build-z80-family, build-68000-family]

    steps:
      - name: Summary
        run: |
          echo "## 🎉 Docker Build Summary"
          echo ""
          echo "### Build Status:"
          echo "- 6502 Family: ${{ needs.build-6502-family.result }}"
          echo "- Z80 Family: ${{ needs.build-z80-family.result }}"
          echo "- 68000 Family: ${{ needs.build-68000-family.result }}"
          echo ""
          echo "### Available Images:"
          echo "**Base Images:**"
          echo "- \`${{ env.GHCR_ORG }}/code198x-base:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/6502-base:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/z80-base:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/68000-base:latest\`"
          echo ""
          echo "**System Images:**"
          echo "- \`${{ env.GHCR_ORG }}/commodore-64:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/nintendo-entertainment-system:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/sinclair-zx-spectrum:latest\`"
          echo "- \`${{ env.GHCR_ORG }}/commodore-amiga:latest\`"