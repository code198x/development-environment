name: Build Docker Images (Modular)

on:
  push:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - '.github/workflows/docker-build-modular.yml'
      - '.github/workflows/build-system-image.yml'
      - 'base-images/*/Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - 'base-images/*/Dockerfile'
  workflow_dispatch:
    inputs:
      build-base-images:
        description: 'Build base images'
        required: false
        default: true
        type: boolean
      build-systems:
        description: 'Build system images'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_ORG: code198x
  GHCR_ORG: ghcr.io/code198x

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

jobs:
  # ============================================
  # Stage 1: Build root base image
  # ============================================
  build-root-base:
    name: code198x-base
    runs-on: ubuntu-latest
    if: github.event.inputs.build-base-images != 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push code198x-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/code198x-base
          file: ./base-images/code198x-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.GHCR_ORG }}/code198x-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # Stage 2: Build processor base images (parallel)
  # ============================================
  build-6502-base:
    name: 6502-base
    runs-on: ubuntu-latest
    needs: build-root-base
    if: always() && (needs.build-root-base.result == 'success' || needs.build-root-base.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push 6502-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/6502-base
          file: ./base-images/6502-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.GHCR_ORG }}/6502-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-z80-base:
    name: z80-base
    runs-on: ubuntu-latest
    needs: build-root-base
    if: always() && (needs.build-root-base.result == 'success' || needs.build-root-base.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push z80-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/z80-base
          file: ./base-images/z80-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.GHCR_ORG }}/z80-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-68000-base:
    name: 68000-base
    runs-on: ubuntu-latest
    needs: build-root-base
    if: always() && (needs.build-root-base.result == 'success' || needs.build-root-base.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push 68000-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/68000-base
          file: ./base-images/68000-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.GHCR_ORG }}/68000-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # Stage 3: Build system images (parallel, separate jobs)
  # Using reusable workflow for DRY principle
  # ============================================

  # 6502 Family (8 systems)
  build-commodore-64:
    name: C64
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: commodore-64
      display-name: Commodore 64
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-commodore-vic-20:
    name: VIC-20
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: commodore-vic-20
      display-name: Commodore VIC-20
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-nintendo-nes:
    name: NES
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: nintendo-entertainment-system
      display-name: Nintendo NES
      test-command: --version
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-apple-ii:
    name: Apple II
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: apple-ii
      display-name: Apple II
      test-command: --version
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-atari-2600:
    name: Atari 2600
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: atari-2600
      display-name: Atari 2600
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-atari-800:
    name: Atari 800
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: atari-800
      display-name: Atari 800
      test-command: --version
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-acorn-bbc-micro:
    name: BBC Micro
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: acorn-bbc-micro
      display-name: BBC Micro
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-acorn-electron:
    name: Electron
    needs: build-6502-base
    if: always() && (needs.build-6502-base.result == 'success' || needs.build-6502-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: acorn-electron
      display-name: Acorn Electron
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  # Z80 Family (5 systems)
  build-zx-spectrum:
    name: Spectrum
    needs: build-z80-base
    if: always() && (needs.build-z80-base.result == 'success' || needs.build-z80-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: sinclair-zx-spectrum
      display-name: ZX Spectrum
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-amstrad-cpc:
    name: CPC
    needs: build-z80-base
    if: always() && (needs.build-z80-base.result == 'success' || needs.build-z80-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: amstrad-cpc
      display-name: Amstrad CPC
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-msx:
    name: MSX
    needs: build-z80-base
    if: always() && (needs.build-z80-base.result == 'success' || needs.build-z80-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: msx
      display-name: MSX
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-sega-master-system:
    name: Master System
    needs: build-z80-base
    if: always() && (needs.build-z80-base.result == 'success' || needs.build-z80-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: sega-master-system
      display-name: Sega Master System
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-nintendo-game-boy:
    name: Game Boy
    needs: build-z80-base
    if: always() && (needs.build-z80-base.result == 'success' || needs.build-z80-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: nintendo-game-boy
      display-name: Nintendo Game Boy
      test-command: --help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  # 68000 Family (3 systems)
  build-commodore-amiga:
    name: Amiga
    needs: build-68000-base
    if: always() && (needs.build-68000-base.result == 'success' || needs.build-68000-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: commodore-amiga
      display-name: Commodore Amiga
      test-command: -help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-atari-st:
    name: Atari ST
    needs: build-68000-base
    if: always() && (needs.build-68000-base.result == 'success' || needs.build-68000-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: atari-st
      display-name: Atari ST
      test-command: -help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-sharp-x68000:
    name: X68000
    needs: build-68000-base
    if: always() && (needs.build-68000-base.result == 'success' || needs.build-68000-base.result == 'skipped') && github.event.inputs.build-systems != 'false'
    uses: ./.github/workflows/build-system-image.yml
    with:
      system-name: sharp-x68000
      display-name: Sharp X68000
      test-command: -help
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  # ============================================
  # Stage 4: Summary
  # ============================================
  summary:
    name: Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [
      # 6502 Family
      build-commodore-64,
      build-commodore-vic-20,
      build-nintendo-nes,
      build-apple-ii,
      build-atari-2600,
      build-atari-800,
      build-acorn-bbc-micro,
      build-acorn-electron,
      # Z80 Family
      build-zx-spectrum,
      build-amstrad-cpc,
      build-msx,
      build-sega-master-system,
      build-nintendo-game-boy,
      # 68000 Family
      build-commodore-amiga,
      build-atari-st,
      build-sharp-x68000
    ]

    steps:
      - name: Check out code for system listing
        uses: actions/checkout@v4

      - name: Generate Summary
        run: |
          # Count systems by processor family
          SYSTEMS_6502=$(ls -1 systems/ | grep -E "commodore-64|nintendo-entertainment-system|apple-ii|atari-2600" | wc -l || echo 0)
          SYSTEMS_Z80=$(ls -1 systems/ | grep -E "sinclair-zx-spectrum|amstrad-cpc|sega-master-system" | wc -l || echo 0)
          SYSTEMS_68000=$(ls -1 systems/ | grep -E "commodore-amiga|atari-st" | wc -l || echo 0)

          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🚀 Docker Build Summary

          ## Build Results (16 Systems)

          ### 6502 Family (8 systems)
          | System | Status | System | Status |
          |--------|--------|--------|--------|
          | C64 | ${{ needs.build-commodore-64.result == 'success' && '✅' || needs.build-commodore-64.result == 'skipped' && '⏭️' || '❌' }} | VIC-20 | ${{ needs.build-commodore-vic-20.result == 'success' && '✅' || needs.build-commodore-vic-20.result == 'skipped' && '⏭️' || '❌' }} |
          | NES | ${{ needs.build-nintendo-nes.result == 'success' && '✅' || needs.build-nintendo-nes.result == 'skipped' && '⏭️' || '❌' }} | Apple II | ${{ needs.build-apple-ii.result == 'success' && '✅' || needs.build-apple-ii.result == 'skipped' && '⏭️' || '❌' }} |
          | Atari 2600 | ${{ needs.build-atari-2600.result == 'success' && '✅' || needs.build-atari-2600.result == 'skipped' && '⏭️' || '❌' }} | Atari 800 | ${{ needs.build-atari-800.result == 'success' && '✅' || needs.build-atari-800.result == 'skipped' && '⏭️' || '❌' }} |
          | BBC Micro | ${{ needs.build-acorn-bbc-micro.result == 'success' && '✅' || needs.build-acorn-bbc-micro.result == 'skipped' && '⏭️' || '❌' }} | Electron | ${{ needs.build-acorn-electron.result == 'success' && '✅' || needs.build-acorn-electron.result == 'skipped' && '⏭️' || '❌' }} |

          ### Z80 Family (5 systems)
          | System | Status | System | Status |
          |--------|--------|--------|--------|
          | Spectrum | ${{ needs.build-zx-spectrum.result == 'success' && '✅' || needs.build-zx-spectrum.result == 'skipped' && '⏭️' || '❌' }} | CPC | ${{ needs.build-amstrad-cpc.result == 'success' && '✅' || needs.build-amstrad-cpc.result == 'skipped' && '⏭️' || '❌' }} |
          | MSX | ${{ needs.build-msx.result == 'success' && '✅' || needs.build-msx.result == 'skipped' && '⏭️' || '❌' }} | Master System | ${{ needs.build-sega-master-system.result == 'success' && '✅' || needs.build-sega-master-system.result == 'skipped' && '⏭️' || '❌' }} |
          | Game Boy | ${{ needs.build-nintendo-game-boy.result == 'success' && '✅' || needs.build-nintendo-game-boy.result == 'skipped' && '⏭️' || '❌' }} | | |

          ### 68000 Family (3 systems)
          | System | Status | System | Status |
          |--------|--------|--------|--------|
          | Amiga | ${{ needs.build-commodore-amiga.result == 'success' && '✅' || needs.build-commodore-amiga.result == 'skipped' && '⏭️' || '❌' }} | Atari ST | ${{ needs.build-atari-st.result == 'success' && '✅' || needs.build-atari-st.result == 'skipped' && '⏭️' || '❌' }} |
          | X68000 | ${{ needs.build-sharp-x68000.result == 'success' && '✅' || needs.build-sharp-x68000.result == 'skipped' && '⏭️' || '❌' }} | | |

          ## Architecture Benefits

          This modular architecture provides:
          - **🚀 Parallel Builds**: Each system builds as a separate job
          - **🎯 Independent Failures**: One system failing doesn't block others
          - **📊 Clear Visibility**: Each system shows as a separate GitHub check
          - **♻️ Reusable Components**: DRY principle via reusable workflows
          - **🔧 Easy Scaling**: Add new systems by adding one workflow call

          ## Performance Metrics (16 Systems)

          | Metric | Sequential | Parallel | Improvement |
          |--------|------------|----------|-------------|
          | Total Jobs | 2 | 20 | 10x granularity |
          | Max Parallelism | 2 | 19 | 9.5x |
          | System Builds | Sequential | 16 concurrent | 🚀 |
          | Failure Impact | Blocks all | Isolated | ✅ |
          | GitHub UI | 2 checks | 20 checks | Full visibility |
          | Build Time (est) | 90+ min | 15-20 min | 4-6x faster |

          ## Registry

          All images available at `ghcr.io/code198x/[image-name]:latest`
          EOF

      - name: Set exit code
        if: |
          needs.build-commodore-64.result == 'failure' ||
          needs.build-commodore-vic-20.result == 'failure' ||
          needs.build-nintendo-nes.result == 'failure' ||
          needs.build-apple-ii.result == 'failure' ||
          needs.build-atari-2600.result == 'failure' ||
          needs.build-atari-800.result == 'failure' ||
          needs.build-acorn-bbc-micro.result == 'failure' ||
          needs.build-acorn-electron.result == 'failure' ||
          needs.build-zx-spectrum.result == 'failure' ||
          needs.build-amstrad-cpc.result == 'failure' ||
          needs.build-msx.result == 'failure' ||
          needs.build-sega-master-system.result == 'failure' ||
          needs.build-nintendo-game-boy.result == 'failure' ||
          needs.build-commodore-amiga.result == 'failure' ||
          needs.build-atari-st.result == 'failure' ||
          needs.build-sharp-x68000.result == 'failure'
        run: exit 1