name: Build Docker Images (Parallel)

on:
  push:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - '.github/workflows/docker-build-parallel.yml'
      - '.github/workflows/build-processor-family.yml'
      - 'base-images/*/Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - 'systems/*/Dockerfile'
      - 'systems/*/*.asm'
      - 'base-images/*/Dockerfile'
  workflow_dispatch:
  schedule:
    # Weekly builds to keep images fresh
    - cron: '0 2 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_ORG: code198x
  GHCR_ORG: ghcr.io/code198x

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

jobs:
  # ============================================
  # STAGE 1: Build the root base image
  # ============================================
  build-root:
    name: Build code198x-base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_ORG }}/code198x-base
            ${{ steps.check-docker-creds.outputs.has-creds == 'true' && format('{0}/code198x-base', env.DOCKER_ORG) || '' }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push code198x-base
        uses: docker/build-push-action@v5
        with:
          context: ./base-images/code198x-base
          file: ./base-images/code198x-base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================
  # STAGE 2: Build processor families in parallel
  # Each family builds its base + all system images
  # ============================================

  build-6502-family:
    name: 6502 Family
    needs: build-root
    uses: ./.github/workflows/build-processor-family.yml
    with:
      processor: '6502'
      systems: '["commodore-64", "nintendo-entertainment-system"]'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-z80-family:
    name: Z80 Family
    needs: build-root
    uses: ./.github/workflows/build-processor-family.yml
    with:
      processor: 'z80'
      systems: '["sinclair-zx-spectrum"]'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  build-68000-family:
    name: 68000 Family
    needs: build-root
    uses: ./.github/workflows/build-processor-family.yml
    with:
      processor: '68000'
      systems: '["commodore-amiga"]'
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

  # ============================================
  # STAGE 3: Summary
  # ============================================
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [build-6502-family, build-z80-family, build-68000-family]

    steps:
      - name: Generate Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🚀 Docker Build Summary

          ## Build Status

          | Processor Family | Status |
          |-----------------|---------|
          | 6502 (C64, NES) | ${{ needs.build-6502-family.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | Z80 (Spectrum) | ${{ needs.build-z80-family.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | 68000 (Amiga) | ${{ needs.build-68000-family.result == 'success' && '✅ Success' || '❌ Failed' }} |

          ## Performance Insights

          This parallel build strategy reduces total build time by building processor families independently:
          - **Before**: Sequential build of all base images → all system images
          - **After**: Parallel builds by processor family (up to 3x faster)

          ## Available Images

          ### Base Images
          - `ghcr.io/code198x/code198x-base:latest` - Common base for all
          - `ghcr.io/code198x/6502-base:latest` - 6502 processor family
          - `ghcr.io/code198x/z80-base:latest` - Z80 processor family
          - `ghcr.io/code198x/68000-base:latest` - 68000 processor family

          ### System Images
          **6502 Family:**
          - `ghcr.io/code198x/commodore-64:latest`
          - `ghcr.io/code198x/nintendo-entertainment-system:latest`

          **Z80 Family:**
          - `ghcr.io/code198x/sinclair-zx-spectrum:latest`

          **68000 Family:**
          - `ghcr.io/code198x/commodore-amiga:latest`
          EOF

      - name: Check overall status
        if: |
          needs.build-6502-family.result != 'success' ||
          needs.build-z80-family.result != 'success' ||
          needs.build-68000-family.result != 'success'
        run: |
          echo "❌ One or more processor families failed to build"
          exit 1