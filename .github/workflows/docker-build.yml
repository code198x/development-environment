name: Build and Push Docker Images

on:
  push:
    branches: [main]
    paths:
      - '*/Dockerfile'
      - '*.asm'
      - '.github/workflows/docker-build.yml'
      - 'base-images/*/Dockerfile'
  pull_request:
    branches: [main]
    paths:
      - '*/Dockerfile'
      - '*.asm'
      - 'base-images/*/Dockerfile'
  workflow_dispatch:
  schedule:
    # Weekly builds to keep images fresh
    - cron: '0 2 * * 1'

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_ORG: code198x
  GHCR_ORG: ghcr.io/code198x

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-base-images:
    name: Build Base Images
    uses: ./.github/workflows/build-base-images.yml
    secrets: inherit

  build-matrix:
    name: Build ${{ matrix.system }}
    runs-on: ubuntu-latest
    needs: build-base-images
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: commodore-64
            assembler: acme
            test-file: test.asm
            test-output: test.prg
            test-command: -o test.prg test.asm

          - system: sinclair-zx-spectrum
            assembler: sjasmplus
            test-file: test.asm
            test-output: test.tap
            test-command: test.asm

          - system: nintendo-entertainment-system
            assembler: cc65
            test-file: test.asm
            test-output: test.o
            test-command: test.asm -o test.o

          - system: commodore-amiga
            assembler: vasm
            test-file: test.asm
            test-output: test
            test-command: -Fhunkexe -o test test.asm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: check-docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Docker Hub credentials not configured. Will push to GitHub Container Registry only."
          fi

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker Hub
        if: steps.check-docker-creds.outputs.has-creds == 'true'
        id: meta-docker
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_ORG }}/${{ matrix.system }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_ORG }}/${{ matrix.system }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}

      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.system }}
          file: ./${{ matrix.system }}/Dockerfile
          platforms: linux/amd64
          push: false
          tags: test-${{ matrix.system }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker image assembly
        run: |
          echo "üß™ Testing ${{ matrix.assembler }} assembler..."

          # Run the assembler on test file
          docker run --rm -v $(pwd)/${{ matrix.system }}:/workspace test-${{ matrix.system }}:latest ${{ matrix.test-command }}

          # Check if output was created
          if [ -f "${{ matrix.system }}/${{ matrix.test-output }}" ]; then
            echo "‚úÖ ${{ matrix.assembler }} test passed - output file created"
            ls -la ${{ matrix.system }}/${{ matrix.test-output }}
          else
            echo "‚ùå ${{ matrix.assembler }} test failed - no output file"
            exit 1
          fi

      - name: Build and push to Docker Hub
        if: github.event_name != 'pull_request' && steps.check-docker-creds.outputs.has-creds == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.system }}
          file: ./${{ matrix.system }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-docker.outputs.tags }}
          labels: ${{ steps.meta-docker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.system }}
          file: ./${{ matrix.system }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  verify-all:
    name: Verify ${{ matrix.system }}
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: commodore-64
            test-command: -o verify.prg test.asm
            test-output: verify.prg
          - system: sinclair-zx-spectrum
            test-command: test.asm
            test-output: test.tap
          - system: nintendo-entertainment-system
            test-command: test.asm -o verify.o
            test-output: verify.o
          - system: commodore-amiga
            test-command: -Fhunkexe -o verify test.asm
            test-output: verify

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify ${{ matrix.system }} image
        run: |
          echo "üîç Testing code198x/${{ matrix.system }}..."
          docker pull ${{ env.DOCKER_ORG }}/${{ matrix.system }}:latest
          docker run --rm -v $(pwd)/${{ matrix.system }}:/workspace ${{ env.DOCKER_ORG }}/${{ matrix.system }}:latest ${{ matrix.test-command }}
          if [ -f "${{ matrix.system }}/${{ matrix.test-output }}" ]; then
            echo "‚úÖ ${{ matrix.system }} verified successfully"
            ls -la ${{ matrix.system }}/${{ matrix.test-output }}
          else
            echo "‚ùå ${{ matrix.system }} verification failed"
            exit 1
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: verify-all
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Build ${{ github.run_number }}
          body: |
            ## Docker Images Published

            ### GitHub Container Registry (Recommended)
            | System | Image | Pull Command |
            |--------|-------|--------------|
            | Commodore 64 | `ghcr.io/code198x/commodore-64:latest` | `docker pull ghcr.io/code198x/commodore-64:latest` |
            | ZX Spectrum | `ghcr.io/code198x/sinclair-zx-spectrum:latest` | `docker pull ghcr.io/code198x/sinclair-zx-spectrum:latest` |
            | NES | `ghcr.io/code198x/nintendo-entertainment-system:latest` | `docker pull ghcr.io/code198x/nintendo-entertainment-system:latest` |
            | Amiga | `ghcr.io/code198x/commodore-amiga:latest` | `docker pull ghcr.io/code198x/commodore-amiga:latest` |

            ### Docker Hub (When configured)
            | System | Image | Pull Command |
            |--------|-------|--------------|
            | Commodore 64 | `code198x/commodore-64:latest` | `docker pull code198x/commodore-64:latest` |
            | ZX Spectrum | `code198x/sinclair-zx-spectrum:latest` | `docker pull code198x/sinclair-zx-spectrum:latest` |
            | NES | `code198x/nintendo-entertainment-system:latest` | `docker pull code198x/nintendo-entertainment-system:latest` |
            | Amiga | `code198x/commodore-amiga:latest` | `docker pull code198x/commodore-amiga:latest` |

            Build date: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false